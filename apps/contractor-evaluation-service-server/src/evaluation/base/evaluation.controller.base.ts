/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EvaluationService } from "../evaluation.service";
import { EvaluationCreateInput } from "./EvaluationCreateInput";
import { Evaluation } from "./Evaluation";
import { EvaluationFindManyArgs } from "./EvaluationFindManyArgs";
import { EvaluationWhereUniqueInput } from "./EvaluationWhereUniqueInput";
import { EvaluationUpdateInput } from "./EvaluationUpdateInput";

export class EvaluationControllerBase {
  constructor(protected readonly service: EvaluationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Evaluation })
  async createEvaluation(
    @common.Body() data: EvaluationCreateInput
  ): Promise<Evaluation> {
    return await this.service.createEvaluation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Evaluation] })
  @ApiNestedQuery(EvaluationFindManyArgs)
  async evaluations(@common.Req() request: Request): Promise<Evaluation[]> {
    const args = plainToClass(EvaluationFindManyArgs, request.query);
    return this.service.evaluations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Evaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async evaluation(
    @common.Param() params: EvaluationWhereUniqueInput
  ): Promise<Evaluation | null> {
    const result = await this.service.evaluation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Evaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEvaluation(
    @common.Param() params: EvaluationWhereUniqueInput,
    @common.Body() data: EvaluationUpdateInput
  ): Promise<Evaluation | null> {
    try {
      return await this.service.updateEvaluation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Evaluation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEvaluation(
    @common.Param() params: EvaluationWhereUniqueInput
  ): Promise<Evaluation | null> {
    try {
      return await this.service.deleteEvaluation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
