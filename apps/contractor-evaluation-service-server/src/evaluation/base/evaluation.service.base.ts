/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Evaluation as PrismaEvaluation } from "@prisma/client";

export class EvaluationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EvaluationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.evaluation.count(args);
  }

  async evaluations(
    args: Prisma.EvaluationFindManyArgs
  ): Promise<PrismaEvaluation[]> {
    return this.prisma.evaluation.findMany(args);
  }
  async evaluation(
    args: Prisma.EvaluationFindUniqueArgs
  ): Promise<PrismaEvaluation | null> {
    return this.prisma.evaluation.findUnique(args);
  }
  async createEvaluation(
    args: Prisma.EvaluationCreateArgs
  ): Promise<PrismaEvaluation> {
    return this.prisma.evaluation.create(args);
  }
  async updateEvaluation(
    args: Prisma.EvaluationUpdateArgs
  ): Promise<PrismaEvaluation> {
    return this.prisma.evaluation.update(args);
  }
  async deleteEvaluation(
    args: Prisma.EvaluationDeleteArgs
  ): Promise<PrismaEvaluation> {
    return this.prisma.evaluation.delete(args);
  }
}
