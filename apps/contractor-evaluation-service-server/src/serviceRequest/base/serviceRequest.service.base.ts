/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServiceRequest as PrismaServiceRequest } from "@prisma/client";

export class ServiceRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceRequest.count(args);
  }

  async serviceRequests(
    args: Prisma.ServiceRequestFindManyArgs
  ): Promise<PrismaServiceRequest[]> {
    return this.prisma.serviceRequest.findMany(args);
  }
  async serviceRequest(
    args: Prisma.ServiceRequestFindUniqueArgs
  ): Promise<PrismaServiceRequest | null> {
    return this.prisma.serviceRequest.findUnique(args);
  }
  async createServiceRequest(
    args: Prisma.ServiceRequestCreateArgs
  ): Promise<PrismaServiceRequest> {
    return this.prisma.serviceRequest.create(args);
  }
  async updateServiceRequest(
    args: Prisma.ServiceRequestUpdateArgs
  ): Promise<PrismaServiceRequest> {
    return this.prisma.serviceRequest.update(args);
  }
  async deleteServiceRequest(
    args: Prisma.ServiceRequestDeleteArgs
  ): Promise<PrismaServiceRequest> {
    return this.prisma.serviceRequest.delete(args);
  }
}
